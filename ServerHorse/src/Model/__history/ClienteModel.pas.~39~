unit ClienteModel;

interface

uses FireDAC.Comp.Client, Data.DB, System.SysUtils, ServerModelConnection, System.Generics.Collections;

type

    TCliente = class

    private
      FCLIENTE_ID: Integer;
      FRAZAO_SOCIAL: String;
      FEMAIL: String;

    public
      constructor Create;
      destructor Destroy; override;

      property CLIENTE_ID: Integer read FCLIENTE_ID write FCLIENTE_ID;
      property RAZAO_SOCIAL: String read FRAZAO_SOCIAL write FRAZAO_SOCIAL;
      property EMAIL: String read FEMAIL write FEMAIL;

      function ListarCliente(order_by: string; out erro: string) : TFDQuery;
      function BuscarCliente(const AQuery: TDictionary<string,string>; out erro: string) : TFDQuery;
      function Inserir(out erro: string) : Boolean;
      function Excluir(out erro: string) : Boolean;
      function Atualizar(out erro: string) : Boolean;

    end;

implementation


{ TCliente }

function TCliente.Atualizar(out erro: string): Boolean;
var
    query : TFDQuery;
begin
    // Validacoes...
    if CLIENTE_ID <= 0 then
    begin
        Result := false;
        erro := 'Informe o id. cliente';
        exit;
    end;

    ServerModelConnection.FConn.StartTransaction;
    try
        query := TFDQuery.Create(nil);
        query.Connection := ServerModelConnection.FConn;

        with query do
        begin
            Active := false;
            sql.Clear;
            SQL.Add('UPDATE CLIENTE SET RAZAO_SOCIAL=:RAZAO_SOCIAL, EMAIL=:EMAIL');
            SQL.Add('WHERE CLIENTE_ID=:CLIENTE_ID');
            ParamByName('RAZAO_SOCIAL').Value := RAZAO_SOCIAL;
            ParamByName('EMAIL').Value := EMAIL;

            ParamByName('CLIENTE_ID').Value := CLIENTE_ID;
            ExecSQL;
        end;

        ServerModelConnection.FConn.Commit;

        query.Free;
        erro := '';
        result := true;

    except on ex:exception do
        begin
            ServerModelConnection.FConn.Rollback;
            erro := 'Erro ao alterar cliente: ' + ex.Message;
            Result := false;
        end;
    end;
end;

constructor TCliente.Create;
begin
   ServerModelConnection.Connected;
end;

destructor TCliente.Destroy;
begin
   ServerModelConnection.Disconnected;
end;

function TCliente.Excluir(out erro: string): Boolean;
var
    query : TFDQuery;
begin

    ServerModelConnection.FConn.StartTransaction;
    try
        query := TFDQuery.Create(nil);
        query.Connection := ServerModelConnection.FConn;

        with query do
        begin
            Active := false;
            sql.Clear;
            SQL.Add('DELETE FROM CLIENTE WHERE CLIENTE_ID=:CLIENTE_ID');
            ParamByName('CLIENTE_ID').Value := CLIENTE_ID;
            ExecSQL;
        end;

        ServerModelConnection.FConn.Commit;
        query.Free;
        erro := '';
        result := true;

    except on ex:exception do
        begin
            ServerModelConnection.FConn.Rollback;
            erro := 'Erro ao excluir cliente: ' + ex.Message;
            Result := false;
        end;
    end;
end;

function TCliente.Inserir(out erro: string): Boolean;
var
  query : TFDQuery;
begin

    if RAZAO_SOCIAL.IsEmpty then
    begin
      Result := False;
      erro := 'Informe a razao social';
      exit;
    end;

    ServerModelConnection.FConn.StartTransaction;
    try
      query := TFDQuery.Create(nil);
      query.Connection := ServerModelConnection.FConn;

      with query do
      begin
        Active := False;
        SQL.Clear;
        SQL.Add('INSERT INTO CLIENTE (RAZAO_SOCIAL, EMAIL)');
        SQL.Add('VALUES(:RAZAO_SOCIAL, :EMAIL)');

        ParamByName('RAZAO_SOCIAL').Value := RAZAO_SOCIAL;
        ParamByName('EMAIL').Value := EMAIL;

        ExecSQL;

        Params.Clear;
        SQL.Clear;
        SQL.Add('SELECT MAX(CLIENTE_ID) AS CLIENTE_ID FROM CLIENTE');
        SQL.Add('WHERE EMAIL = :EMAIL');
        ParamByName('EMAIL').Value := EMAIL;

        Active := True;

        CLIENTE_ID := FieldByName('CLIENTE_ID').AsInteger;
      end;

      ServerModelConnection.FConn.Commit;

      query.Free;
      erro := '';
      Result := True;

    except on ex:exception do
    begin
      ServerModelConnection.FConn.Rollback;
      erro := 'Erro ao cadastrar cliente: ' + ex.Message;
      Result := False;
    end;

    end;


end;

function TCliente.ListarCliente(order_by: string; out erro: string): TFDQuery;
var
  query : TFDQuery;
begin
   //
   try

     query := TFDQuery.Create(Nil);
     query.Connection := ServerModelConnection.FConn;

     with query do
     begin
       Active := False;
       SQL.Clear;
       SQL.Add('SELECT * FROM CLIENTE WHERE 1 = 1');

       if CLIENTE_ID > 0 then
       begin
         SQL.Add('AND CLIENTE_ID = :CLIENTE_ID');
         ParamByName('CLIENTE_ID').Value := CLIENTE_ID;
       end;

       if order_by = '' then
       begin
         SQL.Add('ORDER BY RAZAO_SOCIAL');
       end
       else
       begin
         SQL.Add('ORDER BY ' + order_by);
       end;

       Active := True;

     end;

     erro := '';
     Result := query;

     except on ex:exception do
     begin
         erro := 'Erro ao consultar cliente: ' + ex.Message;
         Result := nil;
     end;

   end;

end;


function TCliente.BuscarCliente(const AQuery: TDictionary<string,string>; out erro: string) : TFDQuery;
var
  query : TFDQuery;
  pesquisa:string;
  sqlC : string;
begin
   //

   if AQuery.ContainsKey('pesquisa') then
   begin

      pesquisa := AQuery.Items['pesquisa'];

   end
   else
   begin
      pesquisa := '';
   end;


   try

     query := TFDQuery.Create(Nil);
     query.Connection := ServerModelConnection.FConn;

     sqlC := 'SELECT * FROM CLIENTE WHERE RAZAO_SOCIAL LIKE ' + QuotedStr('%:RAZAO_SOCIAL%');

      Writeln(sqlC);
      Readln;


     with query do
     begin

       Active := False;
       SQL.Clear;


       SQL.Add(sqlC);
       ParamByName('RAZAO_SOCIAL').Value := pesquisa;



       Active := True;

     end;

     erro := '';
     Result := query;

     except on ex:exception do
     begin
         erro := 'Erro ao consultar cliente: ' + ex.Message;
         Result := nil;
     end;

   end;

end;

end.
